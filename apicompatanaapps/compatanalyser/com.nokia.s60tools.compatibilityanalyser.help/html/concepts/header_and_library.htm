<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Header and library files in preserving compatibility</title>
<link href="../../book.css" type="text/css" rel="stylesheet"></head>
<body>

<h2>Header and library files in preserving compatibility</h2>
<p>For a list of supported header and library files, see <a href="header_and_library.htm#files">
Overview to supported file types</a> below.</p>
<p>Headers and libraries are the static interfaces of a published API. 
They define the layout of data structures
and functions, but not the functionality of the API. </p>
<ul>
<li><b>How do changes in headers affect compatibility?</b><p>Analysing headers
helps to easily find areas in which the programming interface promise has
been broken. One example of in which analysis can help detect compatibility
issues is adding more data members to a class definition. For example, if
the modifications to class data members violate the BC rules, data may become
corrupted. This may be hard to detect but can result as unwanted side effects. 
</p><p>In addition, modifications to the virtual table or virtuality of functions
can typically result in incompatible functionality to be called at application
runtime. Usually, all changes reported after header analysis must be manually
verified for a confirmation of a break.</p></li>
<li><b>How do changes in libraries affect compatibility? </b><p>A removed
library means that dependent components can no longer be compiled. If an application
has a static dependency to a DLL and the DLL is no longer available in the
device, the application in question will not launch at all. The <i>Launcher
</i> tool can be used to verify that all DLLs and resource files are available
on the device. The tool is available in platform releases. </p><p>If the function
ordinals in the library have moved or have been removed, then the components
built using this library will exhibit changes in behaviour and will most possibly
crash during execution. Modification of function signatures can also be detected
in library analysis. Such modifications may mean that originally intended
behaviour is no longer preserved. </p><p>Changes in the UID, SID or Capabilities
of a library/DLL can also be detected in library analysis. </p></li>
</ul>

<h3><a name="files"></a>Overview to supported file types</h3>
<p>You can analyse the following file types with Compatibility Analyser. For library
files, there are specific requirements regarding the use of <a href="../gettingstarted/preconditions.htm#toolchain">
GCCE and RVCT toolchain</a>. </p><p>For more information on file usage with
different types of projects, see <a href="file_handling.htm">File handling
in EXE and DLL projects</a>. </p>

<table width="500" border="1" cellspacing="1" cellpadding="2">
<colgroup>
<col width="23*">
<col width="174*"></colgroup>
<tbody>
<tr>
<td><p>.h, .hpp</p></td>
<td><p>C++ header file. </p><p>A header (or <code>include</code>) file is
automatically included in another source file by the compiler. Typically,
header files are included via compiler directives at the beginning (or head)
of the other source file. </p></td>
</tr>
<tr>
<td><p>.hrh</p></td>
<td><p>Common header file for resources and C++ programs. </p><p>Contains
enumerations that are used in .rss, .h and .cpp files. The typical content
of such a file is the list of commands that are defined in the application
menus, toolbars, and so on. </p></td>
</tr>
<tr>
<td><p>.mbg</p></td>
<td><p>Generated bitmap header file. </p><p>Generated by the toolchain when
creating the Symbian OS multi bitmap file (.mbm) file. </p></td>
</tr>
<tr>
<td><p>.pan</p></td>
<td><p>A user-defined panic code file. </p><p>In .pan files, you can define
your own panic codes. The use of custom panics makes it easier to find bugs
in your application. </p></td>
</tr>
<tr>
<td><p>.rsg</p></td>
<td><p>Generated resource header file. </p><p>Created at compile time by the
resource compiler. These files should be included by .cpp files to handle
resources. </p></td>
</tr>
<tr>
<td><p>.dll</p></td>
<td><p>A dynamic link library file. </p><p>A function library that can be
loaded into memory once and called by one or more applications so that the
operating system dynamically resolves the entry points, or the addresses of
the called routines, at run time.</p></td>
</tr>
<tr>
<td><p>.lib</p></td>
<td><p>Import library file. </p><p>An archive file created from stubs generated
for each of the exported symbols. A library file represents the exported interface
of the DLL. This allows other programs to use the DLL, by linking against
the import library at build time.</p><p><b>Preconditions:</b> see <a href="../gettingstarted/preconditions.htm#toolchain">
GCCE and RVCT toolchain</a>. </p></td>
</tr>
<tr>
<td><p>.dso</p></td>
<td><p>Dynamic shared object file. </p><p>The .dso file has all the associated
sections required for an Executable and Linking Format (ELF) object, such
as the symbol table, string table, and so on. It also has the information
required for the linker to link to the correct ordinals to the DLL. </p><p><b>
Preconditions:</b> see <a href="../gettingstarted/preconditions.htm#toolchain">
GCCE and RVCT toolchain</a>. </p></td>
</tr>
</tbody>
</table>

<h5>Related Tasks</h5>
<ul>
	<li><a href="../tasks/selecting_headerfiles_for_analysis.htm">Selecting header files for analysis</a></li>
	<li><a href="../tasks/selecting_libraryfiles_for_analysis.htm">Selecting library files for analysis</a></li>
</ul>

<div id="footer">Copyright &copy; 2008, 2009 Nokia Corporation and/or its subsidiary(-ies). All rights reserved. 
License: <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.</div>
</body>
</html>